{"version":3,"sources":["AiLogger.js","AiFormLogger.js"],"names":["AiFormLogger","appInsights","window","a","b","c","arguments","queue","push","apply","config","d","document","e","setTimeout","createElement","src","url","getElementsByTagName","parentNode","appendChild","cookie","f","length","pop","disableExceptionTracking","g","h","i","instrumentationKey","disableAjaxTracking","writeMetric","name","average","sampleCount","min","max","newProps","disableTelemetry","disableMetricTracking","trackMetric","combineProps","props","enableDebug","console","log","writeDependency","id","method","absoluteUrl","pathName","totalTime","success","resultCode","disableDependencyTracking","trackDependency","getStartTime","req","methodName","t0","performance","now","getEndTime","mode","Microsoft","ApplicationInsights","Util","newId","_method","_url","status","_async","attrname","hasOwnProperty","disableTraceTracking","disableEventTracking","targetPage","startLogging","verboseLogging","maxAjaxCallsPerView","error","setConfigOptions","test","location","pathname","parent","formName","Xrm","Page","ui","formSelector","getCurrentItem","getLabel","data","entity","getId","substr","getEntityName","formType","getFormTypeName","getFormType","context","getOrgUniqueName","getVersion","setAuthenticatedUserContext","getUserId","trackPageView","isNaN","timing","loadEventEnd","responseEnd","pageLoad","writeEvent","measurements","trackEvent","writeException","exception","handledAt","severityLevel","trackException","writeTrace","message","trackTrace","writeMethodTime","start","end","time","trackDependencyTime","addEventListener","xhrProto","XMLHttpRequest","prototype","origOpen","open","async","this"],"mappings":"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","file":"lat_AiLogger.min.js","sourcesContent":["var appInsights = window.appInsights ||\r\n    function (a) {\r\n        function b(a) {\r\n            c[a] = function () {\r\n                var b = arguments;\r\n                c.queue.push(function () {\r\n                    c[a].apply(c, b)\r\n                })\r\n            }\r\n        }\r\n        var c = {\r\n                config: a\r\n            },\r\n            d = document,\r\n            e = window;\r\n        setTimeout(function () {\r\n            var b = d.createElement(\"script\");\r\n            b.src = a.url || \"https://az416426.vo.msecnd.net/scripts/a/ai.0.js\", d.getElementsByTagName(\"script\")[0].parentNode.appendChild(b)\r\n        });\r\n        try {\r\n            c.cookie = d.cookie\r\n        } catch (a) {}\r\n        c.queue = [];\r\n        for (var f = [\"Event\", \"Exception\", \"Metric\", \"PageView\", \"Trace\", \"Dependency\"]; f.length;) b(\"track\" + f.pop());\r\n        if (b(\"setAuthenticatedUserContext\"), b(\"clearAuthenticatedUserContext\"), b(\"startTrackEvent\"), b(\"stopTrackEvent\"), b(\"startTrackPage\"), b(\"stopTrackPage\"), b(\"flush\"), !a.disableExceptionTracking) {\r\n            f = \"onerror\", b(\"_\" + f);\r\n            var g = e[f];\r\n            e[f] = function (a, b, d, e, h) {\r\n                var i = g && g(a, b, d, e, h);\r\n                return !0 !== i && c[\"_\" + f](a, b, d, e, h), i\r\n            }\r\n        }\r\n        return c\r\n    }({\r\n        instrumentationKey: \"Your AI Instrumentation Key\",\r\n        disableAjaxTracking: true\r\n    });\r\n\r\nwindow.appInsights = appInsights;","var AiFormLogger;\n(function (AiFormLogger) {\n    enableDebug = false;\n    disableTraceTracking = false;\n    disableTelemetry = false;\n    disableExceptionTracking = false;\n    disableAjaxTracking = true;\n    disableDependencyTracking = false;\n    disableMetricTracking = false;\n    disableEventTracking = false;\n    targetPage = window;\n    function startLogging(config) {\n        if (config)\n            setConfigOptions(config);\n        if (/ClientApiWrapper\\.aspx/i.test(window.location.pathname)) {\n            targetPage = window.parent;\n            if (enableDebug)\n                console.log(\"Application Insights page target: window.parent\");\n        }\n        var formName = Xrm.Page.ui.formSelector.getCurrentItem().getLabel();\n        props = {};\n        props[\"entityId\"] = Xrm.Page.data.entity.getId().substr(1, 36);\n        props[\"entityName\"] = Xrm.Page.data.entity.getEntityName();\n        props[\"formType\"] = getFormTypeName(Xrm.Page.ui.getFormType());\n        props[\"orgName\"] = Xrm.Page.context.getOrgUniqueName();\n        props[\"orgVersion\"] = Xrm.Page.context.getVersion();\n        props[\"source\"] = \"JavaScript\";\n        window.appInsights.setAuthenticatedUserContext(Xrm.Page.context.getUserId().substr(1, 36), null, false);\n        trackPageView(formName, props);\n    }\n    AiFormLogger.startLogging = startLogging;\n    function setConfigOptions(config) {\n        try {\n            if (config.hasOwnProperty(\"enableDebug\")) {\n                enableDebug = config.enableDebug;\n                window.appInsights.config.enableDebug = config.enableDebug;\n            }\n            if (config.hasOwnProperty(\"disableTelemetry\"))\n                window.appInsights.config.disableTelemetry = config.disableTelemetry;\n            if (config.hasOwnProperty(\"verboseLogging\"))\n                window.appInsights.config.verboseLogging = config.verboseLogging;\n            if (config.hasOwnProperty(\"disableExceptionTracking\"))\n                window.appInsights.config.disableExceptionTracking = config.disableExceptionTracking;\n            if (config.hasOwnProperty(\"disableAjaxTracking\"))\n                window.appInsights.config.disableAjaxTracking = config.disableAjaxTracking;\n            if (config.hasOwnProperty(\"maxAjaxCallsPerView\"))\n                window.appInsights.config.maxAjaxCallsPerView = config.maxAjaxCallsPerView;\n        }\n        catch (error) {\n            console.log(\"Application Insights error parsing configuration parameters: \" + error);\n        }\n    }\n    function trackPageView(formName, props) {\n        if (isNaN(targetPage.performance.timing.loadEventEnd) || isNaN(targetPage.performance.timing.responseEnd) ||\n            targetPage.performance.timing.loadEventEnd === 0 || targetPage.performance.timing.responseEnd === 0) {\n            setTimeout(function () {\n                trackPageView(formName, props);\n            }, 50);\n        }\n        else {\n            var pageLoad = targetPage.performance.timing.loadEventEnd - targetPage.performance.timing.responseEnd;\n            window.appInsights.trackPageView(formName, null, props, null, pageLoad);\n            if (enableDebug) {\n                console.log(\"Application Insights page tracking started\");\n                console.log(\"Application Insights logged page load time: \" + pageLoad + \"ms\");\n            }\n        }\n    }\n    function writeEvent(name, newProps, measurements) {\n        if (disableTelemetry || disableEventTracking)\n            return;\n        window.appInsights.trackEvent(name, combineProps(props, newProps), measurements);\n        if (enableDebug)\n            console.log(\"Application Insights logged event: \" + name);\n    }\n    AiFormLogger.writeEvent = writeEvent;\n    function writeMetric(name, average, sampleCount, min, max, newProps) {\n        if (disableTelemetry || disableMetricTracking)\n            return;\n        window.appInsights.trackMetric(name, average, sampleCount, min, max, combineProps(props, newProps));\n        if (enableDebug)\n            console.log(\"Application Insights logged metric: \" + name);\n    }\n    AiFormLogger.writeMetric = writeMetric;\n    function writeException(exception, handledAt, newProps, measurements, severityLevel) {\n        if (disableTelemetry || disableExceptionTracking)\n            return;\n        window.appInsights.trackException(exception, handledAt, combineProps(props, newProps), measurements, severityLevel);\n        if (enableDebug)\n            console.log(\"Application Insights logged exception: \" + exception.name);\n    }\n    AiFormLogger.writeException = writeException;\n    function writeTrace(message, newProps, severityLevel) {\n        if (disableTelemetry || disableTraceTracking)\n            return;\n        window.appInsights.trackTrace(message, combineProps(props, newProps), severityLevel);\n        if (enableDebug)\n            console.log(\"Application Insights logged trace: \" + message);\n    }\n    AiFormLogger.writeTrace = writeTrace;\n    function writeDependency(id, method, absoluteUrl, pathName, totalTime, success, resultCode, newProps) {\n        if (disableTelemetry || disableDependencyTracking)\n            return;\n        window.appInsights.trackDependency(id, method, absoluteUrl, pathName, totalTime, success, resultCode, combineProps(props, newProps), null);\n        if (enableDebug)\n            console.log(\"Application Insights logged dependency: \" + id + \": \" + totalTime);\n    }\n    AiFormLogger.writeDependency = writeDependency;\n    function writeMethodTime(methodName, start, end) {\n        var time = end - start;\n        writeMetric(\"Method Time: \" + methodName, time, null, null, null);\n        if (enableDebug)\n            console.log(\"Application Insights logged method time: \" + methodName + \": \" + time + \"ms\");\n    }\n    AiFormLogger.writeMethodTime = writeMethodTime;\n    function trackDependencyTime(req, methodName) {\n        req.addEventListener(\"loadstart\", function () {\n            getStartTime(req, methodName);\n        });\n        req.addEventListener(\"load\", function () {\n            getEndTime(req, true);\n        });\n        req.addEventListener(\"error\", function () {\n            getEndTime(req, false);\n        });\n    }\n    AiFormLogger.trackDependencyTime = trackDependencyTime;\n    function getStartTime(req, methodName) {\n        req.t0 = performance.now();\n        req.methodName = methodName;\n    }\n    AiFormLogger.getStartTime = getStartTime;\n    function getEndTime(req, success) {\n        writeDependency(Microsoft.ApplicationInsights.Util.newId(), req._method, req._url, \"\" + req._url, performance.now() - req.t0, success, req.status, { methodName: req.methodName, mode: getMode(req._async) });\n    }\n    AiFormLogger.getEndTime = getEndTime;\n    function combineProps(props, newProps) {\n        if (newProps === null)\n            return props;\n        for (var attrname in newProps) {\n            if (newProps.hasOwnProperty(attrname))\n                props[attrname] = newProps[attrname];\n        }\n        return props;\n    }\n    function getFormTypeName(formType) {\n        switch (formType) {\n            case 1:\n                return \"Create\";\n            case 2:\n                return \"Update\";\n            case 3:\n                return \"Read Only\";\n            case 4:\n                return \"Disabled\";\n            case 6:\n                return \"Bulk Edit\";\n            default:\n                return \"Undefined\";\n        }\n    }\n    function getMode(mode) {\n        return (mode) ? \"Asynchronous\" : \"Synchronous\";\n    }\n})(AiFormLogger || (AiFormLogger = {}));\nvar xhrProto = XMLHttpRequest.prototype, origOpen = xhrProto.open;\nxhrProto.open = function (method, url, async) {\n    this._url = url;\n    this._method = method;\n    this._async = async;\n    return origOpen.apply(this, arguments);\n};\n"]}